/*
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  [View Changelog](/app/apiChangelog)  -  #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  _All_ table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  _This is only a small subset of what is available, to get you started._  Fill in the parameters and click the `Try it out!` button to try any of these queries.  - [Pricing Data](#!/Quote/Quote_get)  - [Trade Data](#!/Trade/Trade_get)  - [OrderBook Data](#!/OrderBook/OrderBook_getL2)  - [Settlement Data](#!/Settlement/Settlement_get)  - [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)  -  ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.11-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.BitMexApi);
  }
}(this, function(expect, BitMexApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('Affiliate', function() {
      beforeEach(function() {
        instance = new BitMexApi.Affiliate();
      });

      it('should create an instance of Affiliate', function() {
        // TODO: update the code to test Affiliate
        expect(instance).to.be.a(BitMexApi.Affiliate);
      });

      it('should have the property account (base name: "account")', function() {
        // TODO: update the code to test the property account
        expect(instance).to.have.property('account');
        // expect(instance.account).to.be(expectedValueLiteral);
      });

      it('should have the property currency (base name: "currency")', function() {
        // TODO: update the code to test the property currency
        expect(instance).to.have.property('currency');
        // expect(instance.currency).to.be(expectedValueLiteral);
      });

      it('should have the property prevPayout (base name: "prevPayout")', function() {
        // TODO: update the code to test the property prevPayout
        expect(instance).to.have.property('prevPayout');
        // expect(instance.prevPayout).to.be(expectedValueLiteral);
      });

      it('should have the property prevTurnover (base name: "prevTurnover")', function() {
        // TODO: update the code to test the property prevTurnover
        expect(instance).to.have.property('prevTurnover');
        // expect(instance.prevTurnover).to.be(expectedValueLiteral);
      });

      it('should have the property prevComm (base name: "prevComm")', function() {
        // TODO: update the code to test the property prevComm
        expect(instance).to.have.property('prevComm');
        // expect(instance.prevComm).to.be(expectedValueLiteral);
      });

      it('should have the property prevTimestamp (base name: "prevTimestamp")', function() {
        // TODO: update the code to test the property prevTimestamp
        expect(instance).to.have.property('prevTimestamp');
        // expect(instance.prevTimestamp).to.be(expectedValueLiteral);
      });

      it('should have the property execTurnover (base name: "execTurnover")', function() {
        // TODO: update the code to test the property execTurnover
        expect(instance).to.have.property('execTurnover');
        // expect(instance.execTurnover).to.be(expectedValueLiteral);
      });

      it('should have the property execComm (base name: "execComm")', function() {
        // TODO: update the code to test the property execComm
        expect(instance).to.have.property('execComm');
        // expect(instance.execComm).to.be(expectedValueLiteral);
      });

      it('should have the property totalReferrals (base name: "totalReferrals")', function() {
        // TODO: update the code to test the property totalReferrals
        expect(instance).to.have.property('totalReferrals');
        // expect(instance.totalReferrals).to.be(expectedValueLiteral);
      });

      it('should have the property totalTurnover (base name: "totalTurnover")', function() {
        // TODO: update the code to test the property totalTurnover
        expect(instance).to.have.property('totalTurnover');
        // expect(instance.totalTurnover).to.be(expectedValueLiteral);
      });

      it('should have the property totalComm (base name: "totalComm")', function() {
        // TODO: update the code to test the property totalComm
        expect(instance).to.have.property('totalComm');
        // expect(instance.totalComm).to.be(expectedValueLiteral);
      });

      it('should have the property payoutPcnt (base name: "payoutPcnt")', function() {
        // TODO: update the code to test the property payoutPcnt
        expect(instance).to.have.property('payoutPcnt');
        // expect(instance.payoutPcnt).to.be(expectedValueLiteral);
      });

      it('should have the property pendingPayout (base name: "pendingPayout")', function() {
        // TODO: update the code to test the property pendingPayout
        expect(instance).to.have.property('pendingPayout');
        // expect(instance.pendingPayout).to.be(expectedValueLiteral);
      });

      it('should have the property timestamp (base name: "timestamp")', function() {
        // TODO: update the code to test the property timestamp
        expect(instance).to.have.property('timestamp');
        // expect(instance.timestamp).to.be(expectedValueLiteral);
      });

      it('should have the property referrerAccount (base name: "referrerAccount")', function() {
        // TODO: update the code to test the property referrerAccount
        expect(instance).to.have.property('referrerAccount');
        // expect(instance.referrerAccount).to.be(expectedValueLiteral);
      });

      it('should have the property referralDiscount (base name: "referralDiscount")', function() {
        // TODO: update the code to test the property referralDiscount
        expect(instance).to.have.property('referralDiscount');
        // expect(instance.referralDiscount).to.be(expectedValueLiteral);
      });

      it('should have the property affiliatePayout (base name: "affiliatePayout")', function() {
        // TODO: update the code to test the property affiliatePayout
        expect(instance).to.have.property('affiliatePayout');
        // expect(instance.affiliatePayout).to.be(expectedValueLiteral);
      });

    });
  });

}));
